# Unbabel迁移到Kubernetes，你不会相信接下来会发生什么！

随着需求巨幅的增长，随之而来的是一系列巨大的挑战，以及应对这些挑战巨大的责任。

在Unbabel，我们的指数增长说明了需求的增长，伴随着需求的增长，我们所创建的项目在规模和数量也在增长。

过去，我们使用Amazon，每个EC2实例保留一个项目，其中每个项目都是通过为他们量身定制的Ansible palybook配置的。直到不久之前，这似乎运作得相当好。每个项目都有一个实例，并且playbook将确保项目及其依赖项都保持到最新。

![img](https://miro.medium.com/max/875/1*K13hLX_6TaPWWdYHMwNORw.png)

每个项目都有一个Ansible playbook

然而，这并不是没有缺点。随着项目的使用数量的增长，我们应该如何在多个实例中正确分配负载？我们如何确保实例不仅是最新的，而且在版本，依赖关系和配置方面也是一致的？随着变化变得越来越频繁，我们是否真的希望开发人员在该项目的每个实例上都运行Ansible playbook（可能需要几分钟）？

所有这些问题都有可能的解决方案，并且所有这些问题都有可能解决，但所有这些问题都会给我们的开发人员带来更多的认知开销。

此外，随着我们的团队的成长和新项目的出现，每个实例都保持一个项目就开始变得浪费。通常，一些较小的项目可能会让实例在大部分时间处于空闲状态，只需要在特定的时间使用计算能力。

实例数量的增加也阻碍了我们的DevOps团队。必须配置和维护日志、指标和保持各种其他配置的最新状态，这对于十几台机器来说可能是有意义的——但是当您达到数百台时，它根本就不是可扩展的。

# 改变的时候

2018年初，Unbabel的DevOps团队着手解决这些不断上升的问题。我们的目标是让开发人员更快、更容易地部署，减少向上或向下扩展项目资源所需的时间，并尽可能自动化任何用于日志记录、应用程序度量和资源控制的额外配置。理想情况下，甚至让它们对项目本身不可见。

经过一番调查，[Kubernetes](https://kubernetes.io/)似乎提供了我们追求的目标：

- 它专为数以万计的微服务量身定制。
- 它的部署彼此隔离 - *它提供低耦合的服务*。
- 它的部署与基础实例隔离 - *它抽象了底层系统*。
- 部署更新需要*几秒钟*而不是几分钟。

这些以及许多其他优势使其成为这些变化的有力候选者。

![img](https://miro.medium.com/max/875/1*1HMU_sNUyGm0w9EEfV-4lA.png)

Kubernetes所提供的功能使其成为一个非常强大的候选人

然而，并非一切都是理想的。Kubernetes的复杂性和*没有电池的*意识形态意味着如果我们想要实现这种迁移，我们必须克服几个障碍。

我们必须自己设置日志记录和指标监控，并在适用时发现如何自动化这些服务发现。Kubernetes如此广泛的事实也意味着它具有很高的学习曲线，可能会减缓我们团队的采用速度。我们的大多数项目也不是简单的微服务，这使得更新部署在某些情况下更加复杂。

# 整理一个计划

考虑到我们的目标和可能遇到的危险，我们着手制定迁移计划。这个想法很简单，从流量低，风险低的项目开始，这将最有利于迁移到Kubernetes。这些将为我们提供一个安全缓冲区，使我们能够在不做出极端妥协的情况下涉足其中，并向Unbabel的工程团队展示新系统改进后的工作流的优势。

我们在Google Cloud中设置了一个群集，并开始迁移第一个暂存环境。我们设置DaemonSets进行日志记录，并在内部设置Prometheus集群进行监控。我们使用RBAC和名称空间进行了试验，这样团队成员就可以访问他们的项目，并且可以轻松地管理任何必要的内容。

为了帮助我们的开发人员适应新的环境，我们准备了一些研讨会，他们可以参加这些研讨会来开始学习Kubernetes，创建了关于如何设置他们的环境的指南，并提供了一些实践教程，在这些教程中，他们可以在minikube集群中启动自己的简单模拟服务。此外，我们帮助回答了提出的每一个问题，并试图使用更全面的指南和更好的工具来缓解常见的问题。

当然，一些意想不到的情况确实发生了，在这些情况下，期望与现实不匹配，并且在我们转换方法时必须对环境进行更改。即便如此，那里的项目仍然比以前使用Ansible playbook的项目拥有更好的环境，而且一旦配置好，维护这些项目的负担就会低得多，减少了我们的工作量。

随着时间的推移，我们开始向新项目的所有者建议，在Kubernetes上直接设置他们的环境，并对现有项目进行重大迁移的用户也这样建议。

# 结果怎么样？

我们目前有四个Kubernetes集群，已经迁移了许多项目，并且正在迁移一些核心服务。其结果是，正在使用可选的Ansible playbooks的数量正在下降。

当然在这个过程中也有一些问题。例如，Kubernetes的秘密管理起来就很麻烦。如果您既希望使用OICD轻松登录，又希望每个开发人员都使用自己的帐户来防止Dashboard上可能的权限升级，那么Kubernetes Dashboard的设置也非常脆弱。我们甚至遇到了[5-15s DNS查找](https://blog.quenting-machu.fr/2018/06/24/5-15s-dns-lookups-onkubernetes/)问题，因为其中一个主要服务被迁移了。

![img](https://miro.medium.com/max/875/1*XtAyxXbTeYSiTARTNQl0Eg.png)

（着名）Kubernetes dashboard

但即使有这些问题，我们对结果还是很满意。建立一个新项目从一个可能需要几个小时或几天的事情变成了可以在几分钟内完成的事情，而我们谈论的大多数项目几乎可以完全由业主自己完成。

手工实例维护任务正在减少，我们可以将重点放在更高级别的问题上，比如“如何进一步改进监视基础设施”，而不是一次更新所有实例上的服务X、Y或Z。或者“我们如何自动化任务X?”Kubernetes的滚动更新立即为我们解决了这个问题，而不是手动实现蓝绿色部署或处理停机窗口。

一些不期望的好处也成为我们开发实践的重要补充。通过将Kubernetes部署到我们的CI管道中，我们得到了惊人的可重复性和对任何提交的简单回滚。一般而言，开发人员可以不再担心部署新版本，让CI为他们做到这一点。对开发环境和生产环境的任何更改都被完全记录下来，并且由于Grafana dashboards 上的注释，任何回归都可以精确到部署的确切提交。

![img](https://miro.medium.com/max/875/1*ED-6AsPVxhuw1YTwn9d99Q.png)

我们的Grafana dashboards确实令人惊叹

一个特别成功的案例是我们的核心整体，以前有一个缓慢且容易出错的部署，可能需要长达20分钟的部署，基于脆弱的结构脚本构建，如果有任何甚至稍微偏离的话，这些脚本倾向于使事情处于不一致状态预期的。我们建立了一个CI阶段来构建一个docker镜像，从部署时间到编译时移动了很多进程（*我正在看你，Django的collectstatic*），设置一个临时环境，并经过多次准备设置切换。一切顺利，我们的部署现在需要不到1分钟的时间来运行，全部通过CI！

# 下一步是什么？

做出这一改变是我们旅程中最大的一次飞跃，但这并不意味着我们已经完成了。我们仍然有很多需要迁移到Kubernetes的项目，包括几个主要的内部项目。

此外，我们仍然希望专注于提高开发人员的生活质量。实际上，我们希望找到并实施一个良好的秘密管理解决方案，以防止开发人员必须来回转换为base64和从base64，以及保持这些秘密安全和版本化。

Kubernetes dashboards仍然是我们的一个主要障碍，我们正在调查是否应该让用户使用OICD登录他们的帐户，或者找到一个完全不同的替代方案，为我们提供良好的界面和合理的安全性。

最后(就目前而言)，许多部署具有类似的结构，并且它们的大部分创建可以自动化和简化。这可以通过首先检测常见的依赖关系(如数据库和事件队列)并创建可使用的中心基础设施，以及检测项目的常见模式并创建遵循这些模式的helm图表来实现。

# 总结

我们开始这一旅程是为了扩大我们的资源和简化我们的部署。最后，我们(额)不仅得到了这样的结果，还得到了一个声明性的、连续的部署管道，其具有更好的安全性、监视和可伸缩性。

当然，这并不容易，并且需要与整个开发团队进行跨功能的工作，但我们获得的好处超过了整个过程中遇到的所有障碍。我们的工作远未完成。有部署要迁移！管道改进！世界不会停止在我们身边发展，我们也不会。
